<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 7.1.2">

    <issue
        id="LintError"
        severity="Error"
        message="The lint detector&#xA;    `androidx.appcompat.view.OnClickXmlDetector`&#xA;called `context.getMainProject()` during module analysis.&#xA;&#xA;This does not work correctly when running in AGP (7.1.2).&#xA;&#xA;In particular, there may be false positives or false negatives because&#xA;the lint check may be using the minSdkVersion or manifest information&#xA;from the library instead of any consuming app module.&#xA;&#xA;Contact the vendor of the lint issue to get it fixed/updated (if&#xA;known, listed below), and in the meantime you can try to work around&#xA;this by disabling the following issues:&#xA;&#xA;&quot;UsingOnClickInXml&quot;&#xA;&#xA;Issue Vendors:&#xA;Vendor: Android Open Source Project (appcompat-1.3.0)&#xA;Identifier: appcompat-1.3.0&#xA;Feedback: https://issuetracker.google.com/issues/new?component=192731&#xA;&#xA;Call stack: Context.getMainProject(Context.kt:117)←OnClickXmlDetector.visitAttribute(OnClickXmlDetector.kt:51)←ResourceVisitor.visitElement(ResourceVisitor.java:161)←ResourceVisitor.visitElement(ResourceVisitor.java:177)←ResourceVisitor.visitFile(ResourceVisitor.java:125)←LintDriver$checkResourceFolder$1.run(LintDriver.kt:2233)←LintClient.runReadAction(LintClient.kt:1786)←LintDriver$LintClientWrapper.runReadAction(LintDriver.kt:2707)←LintDriver.checkResourceFolder(LintDriver.kt:2228)←LintDriver.checkResFolder(LintDriver.kt:2181)←LintDriver.runFileDetectors(LintDriver.kt:1376)←LintDriver.checkProject(LintDriver.kt:1168)←LintDriver.checkProjectRoot(LintDriver.kt:631)←LintDriver.access$checkProjectRoot(LintDriver.kt:156)←LintDriver$analyzeOnly$1.invoke(LintDriver.kt:445)←LintDriver$analyzeOnly$1.invoke(LintDriver.kt:438)←LintDriver.doAnalyze(LintDriver.kt:505)←LintDriver.analyzeOnly(LintDriver.kt:437)←LintCliClient$analyzeOnly$1.invoke(LintCliClient.kt:242)←LintCliClient$analyzeOnly$1.invoke(LintCliClient.kt:242)"
        category="Lint"
        priority="10"
        summary="Lint Failure"
        explanation="This issue type represents a problem running lint itself. Examples include failure to find bytecode for source files (which means certain detectors could not be run), parsing errors in lint configuration files, etc.&#xA;&#xA;These errors are not errors in your own code, but they are shown to make it clear that some checks were not completed.">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/activity_main.xml"/>
    </issue>

    <issue
        id="UseSwitchCompatOrMaterialCode"
        severity="Warning"
        message="Use `SwitchCompat` from AppCompat or `SwitchMaterial` from Material library"
        category="Correctness"
        priority="5"
        summary="Replace usage of `Switch` widget"
        explanation="Use `SwitchCompat` from AppCompat or `SwitchMaterial` from Material library"
        errorLine1="    private Switch greenSwitch;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/java/com/example/thermoledmobileclient/ProActivity.java"
            line="80"
            column="5"/>
    </issue>

    <issue
        id="UseSwitchCompatOrMaterialCode"
        severity="Warning"
        message="Use `SwitchCompat` from AppCompat or `SwitchMaterial` from Material library"
        category="Correctness"
        priority="5"
        summary="Replace usage of `Switch` widget"
        explanation="Use `SwitchCompat` from AppCompat or `SwitchMaterial` from Material library"
        errorLine1="    private Switch redSwitch;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/java/com/example/thermoledmobileclient/ProActivity.java"
            line="81"
            column="5"/>
    </issue>

    <issue
        id="UseSwitchCompatOrMaterialCode"
        severity="Warning"
        message="Use `SwitchCompat` from AppCompat or `SwitchMaterial` from Material library"
        category="Correctness"
        priority="5"
        summary="Replace usage of `Switch` widget"
        explanation="Use `SwitchCompat` from AppCompat or `SwitchMaterial` from Material library"
        errorLine1="            Switch reds;"
        errorLine2="            ~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/java/com/example/thermoledmobileclient/ProActivity.java"
            line="321"
            column="13"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="This folder configuration (`v24`) is unnecessary; `minSdkVersion` is 27. Merge all the resources in this folder into `drawable`."
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder.">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/drawable-v24"/>
    </issue>

    <issue
        id="ObsoleteSdkInt"
        severity="Warning"
        message="This folder configuration (`v26`) is unnecessary; `minSdkVersion` is 27. Merge all the resources in this folder into `mipmap-anydpi`."
        category="Performance"
        priority="6"
        summary="Obsolete SDK_INT Version Check"
        explanation="This check flags version checks that are not necessary, because the `minSdkVersion` (or surrounding known API level) is already at least as high as the version checked for.&#xA;&#xA;Similarly, it also looks for resources in `-vNN` folders, such as `values-v14` where the version qualifier is less than or equal to the `minSdkVersion`, where the contents should be merged into the best folder.">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/mipmap-anydpi-v26"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(port)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        Integer iport = new Integer(port);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/java/com/example/thermoledmobileclient/MainActivity.java"
            line="73"
            column="25"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(key)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        Integer ikey = new Integer(key);"
        errorLine2="                       ~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/java/com/example/thermoledmobileclient/MainActivity.java"
            line="74"
            column="24"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(port)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        Integer iport = new Integer(port);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/java/com/example/thermoledmobileclient/MainActivity.java"
            line="135"
            column="25"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(key)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        Integer ikey = new Integer(key);"
        errorLine2="                       ~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/java/com/example/thermoledmobileclient/MainActivity.java"
            line="136"
            column="24"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(port)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        Integer iport = new Integer(port);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/java/com/example/thermoledmobileclient/MainActivity.java"
            line="145"
            column="25"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(key)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        Integer ikey = new Integer(key);"
        errorLine2="                       ~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/java/com/example/thermoledmobileclient/MainActivity.java"
            line="146"
            column="24"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(port)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        Integer iport = new Integer(port);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/java/com/example/thermoledmobileclient/ProActivity.java"
            line="257"
            column="25"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(key)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        Integer ikey = new Integer(key);"
        errorLine2="                       ~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/java/com/example/thermoledmobileclient/ProActivity.java"
            line="258"
            column="24"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(port)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        Integer iport = new Integer(port);"
        errorLine2="                        ~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/java/com/example/thermoledmobileclient/ProActivity.java"
            line="271"
            column="25"/>
    </issue>

    <issue
        id="UseValueOf"
        severity="Warning"
        message="Use `Integer.valueOf(key)` instead"
        category="Performance"
        priority="4"
        summary="Should use `valueOf` instead of `new`"
        explanation="You should not call the constructor for wrapper classes directly, such as`new Integer(42)`. Instead, call the `valueOf` factory method, such as `Integer.valueOf(42)`. This will typically use less memory because common integers such as 0 and 1 will share a single instance."
        errorLine1="        Integer ikey = new Integer(key);"
        errorLine2="                       ~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/java/com/example/thermoledmobileclient/ProActivity.java"
            line="272"
            column="24"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.layout.initialpage` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.&#xA;&#xA;The unused resource check can ignore tests. If you want to include resources that are only referenced from tests, consider packaging them in a test source set instead.&#xA;&#xA;You can include test sources in the unused resource check by setting the system property lint.unused-resources.include-tests=true, and to exclude them (usually for performance reasons), use lint.unused-resources.exclude-tests=true."
        errorLine1="&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="^">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/initialpage.xml"
            line="2"
            column="1"/>
    </issue>

    <issue
        id="Autofill"
        severity="Warning"
        message="Missing `autofillHints` attribute"
        category="Usability"
        priority="3"
        summary="Use Autofill"
        explanation="Specify an `autofillHints` attribute when targeting SDK version 26 or higher or explicitly specify that the view is not important for autofill. Your app can help an autofill service classify the data correctly by providing the meaning of each view that could be autofillable, such as views representing usernames, passwords, credit card fields, email addresses, etc.&#xA;&#xA;The hints can have any value, but it is recommended to use predefined values like &apos;username&apos; for a username or &apos;creditCardNumber&apos; for a credit card number. For a list of all predefined autofill hint constants, see the `AUTOFILL_HINT_` constants in the `View` reference at https://developer.android.com/reference/android/view/View.html.&#xA;&#xA;You can mark a view unimportant for autofill by specifying an `importantForAutofill` attribute on that view or a parent view. See https://developer.android.com/reference/android/view/View.html#setImportantForAutofill(int)."
        url="https://developer.android.com/guide/topics/text/autofill.html"
        urls="https://developer.android.com/guide/topics/text/autofill.html"
        errorLine1="    &lt;EditText"
        errorLine2="     ~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/initialpage.xml"
            line="30"
            column="6"/>
    </issue>

    <issue
        id="Autofill"
        severity="Warning"
        message="Missing `autofillHints` attribute"
        category="Usability"
        priority="3"
        summary="Use Autofill"
        explanation="Specify an `autofillHints` attribute when targeting SDK version 26 or higher or explicitly specify that the view is not important for autofill. Your app can help an autofill service classify the data correctly by providing the meaning of each view that could be autofillable, such as views representing usernames, passwords, credit card fields, email addresses, etc.&#xA;&#xA;The hints can have any value, but it is recommended to use predefined values like &apos;username&apos; for a username or &apos;creditCardNumber&apos; for a credit card number. For a list of all predefined autofill hint constants, see the `AUTOFILL_HINT_` constants in the `View` reference at https://developer.android.com/reference/android/view/View.html.&#xA;&#xA;You can mark a view unimportant for autofill by specifying an `importantForAutofill` attribute on that view or a parent view. See https://developer.android.com/reference/android/view/View.html#setImportantForAutofill(int)."
        url="https://developer.android.com/guide/topics/text/autofill.html"
        urls="https://developer.android.com/guide/topics/text/autofill.html"
        errorLine1="    &lt;EditText"
        errorLine2="     ~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/initialpage.xml"
            line="43"
            column="6"/>
    </issue>

    <issue
        id="Autofill"
        severity="Warning"
        message="Missing `autofillHints` attribute"
        category="Usability"
        priority="3"
        summary="Use Autofill"
        explanation="Specify an `autofillHints` attribute when targeting SDK version 26 or higher or explicitly specify that the view is not important for autofill. Your app can help an autofill service classify the data correctly by providing the meaning of each view that could be autofillable, such as views representing usernames, passwords, credit card fields, email addresses, etc.&#xA;&#xA;The hints can have any value, but it is recommended to use predefined values like &apos;username&apos; for a username or &apos;creditCardNumber&apos; for a credit card number. For a list of all predefined autofill hint constants, see the `AUTOFILL_HINT_` constants in the `View` reference at https://developer.android.com/reference/android/view/View.html.&#xA;&#xA;You can mark a view unimportant for autofill by specifying an `importantForAutofill` attribute on that view or a parent view. See https://developer.android.com/reference/android/view/View.html#setImportantForAutofill(int)."
        url="https://developer.android.com/guide/topics/text/autofill.html"
        urls="https://developer.android.com/guide/topics/text/autofill.html"
        errorLine1="    &lt;EditText"
        errorLine2="     ~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/initialpage.xml"
            line="56"
            column="6"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="Missing accessibility label: provide either a view with an `android:labelFor` that references this view or provide an `android:hint`"
        category="Accessibility"
        priority="2"
        summary="Missing accessibility label"
        explanation="Editable text fields should provide an `android:hint` or, provided your `minSdkVersion` is at least 17, they may be referenced by a view with a `android:labelFor` attribute.&#xA;&#xA;When using `android:labelFor`, be sure to provide an `android:text` or an `android:contentDescription`.&#xA;&#xA;If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="    &lt;EditText"
        errorLine2="     ~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/initialpage.xml"
            line="30"
            column="6"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="Missing accessibility label: provide either a view with an `android:labelFor` that references this view or provide an `android:hint`"
        category="Accessibility"
        priority="2"
        summary="Missing accessibility label"
        explanation="Editable text fields should provide an `android:hint` or, provided your `minSdkVersion` is at least 17, they may be referenced by a view with a `android:labelFor` attribute.&#xA;&#xA;When using `android:labelFor`, be sure to provide an `android:text` or an `android:contentDescription`.&#xA;&#xA;If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="    &lt;EditText"
        errorLine2="     ~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/initialpage.xml"
            line="43"
            column="6"/>
    </issue>

    <issue
        id="LabelFor"
        severity="Warning"
        message="Missing accessibility label: provide either a view with an `android:labelFor` that references this view or provide an `android:hint`"
        category="Accessibility"
        priority="2"
        summary="Missing accessibility label"
        explanation="Editable text fields should provide an `android:hint` or, provided your `minSdkVersion` is at least 17, they may be referenced by a view with a `android:labelFor` attribute.&#xA;&#xA;When using `android:labelFor`, be sure to provide an `android:text` or an `android:contentDescription`.&#xA;&#xA;If your view is labeled but by a label in a different layout which includes this one, just suppress this warning from lint."
        errorLine1="    &lt;EditText"
        errorLine2="     ~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/initialpage.xml"
            line="56"
            column="6"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Ip do Servidor&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:hint=&quot;Ip do Servidor&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/activity_login.xml"
            line="33"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Get Temperature&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Get Temperature&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/activity_main.xml"
            line="16"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Temperature will show here&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Temperature will show here&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/activity_main.xml"
            line="26"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Led On&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Led On&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/activity_main.xml"
            line="37"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Led Off&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Led Off&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/activity_main.xml"
            line="47"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Red Led&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Red Led&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/activity_pro.xml"
            line="26"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Green Led&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Green Led&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/activity_pro.xml"
            line="39"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Senha: &quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Senha: &quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/initialpage.xml"
            line="14"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Login: &quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Login: &quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/initialpage.xml"
            line="25"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;User&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;User&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/initialpage.xml"
            line="39"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;password&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;password&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/initialpage.xml"
            line="52"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;34.136.25.200&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;34.136.25.200&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/initialpage.xml"
            line="65"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Entrar&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Entrar&quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/initialpage.xml"
            line="76"
            column="9"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="Hardcoded string &quot;Servidor: &quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:&#xA;&#xA;* When creating configuration variations (for example for landscape or portrait) you have to repeat the actual text (and keep it up to date when making changes)&#xA;&#xA;* The application cannot be translated to other languages by just adding new translations for existing string resources.&#xA;&#xA;There are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="        android:text=&quot;Servidor: &quot;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/gustavo/facul/SSU/parte2/class-project---part-2-android-iot-client-equipe73/app/src/main/res/layout/initialpage.xml"
            line="87"
            column="9"/>
    </issue>

</issues>
